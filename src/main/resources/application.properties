# ===============================
# THYMELEAF
# ===============================
spring.thymeleaf.cache=false

# ===============================
# DATASOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "mycontact"
spring.datasource.url=jdbc:mysql://10.1.7.11:3306/vaircar?useSSL=false

# MySQL username and password 
spring.datasource.username=root
spring.datasource.password=vietis@12345

#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Spring security login queries
security.basic.enabled=false
spring.queries.accounts-query=select username,password from account where username='?'
spring.queries.roles-query=select a.username, r.role_name from account a inner join account_role_pk au on(a.account_id=au.account_id) inner join role r on(au.role_id=r.role_id) where a.username='?'

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.dbcp.test-while-idle=true
spring.datasource.dbcp.validation-query=SELECT 1

# ===============================
# JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=update

# Naming strategy
#spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy--Phần này cmt 

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect


